The module is written on top of another module called Express. This module helps in building RESTful servers very easily. We are using NodeJs because it javascript that is only specific to the server side and the learning curve is not very steep.
The server has 3 major functions, one , to handle all the POST requests from the Raspberry Pi, second, to handle all the GET requests from the client side which is the phone application and third is to relay it in real time using socket-io. The server is an implementation of socket io and RESTful commands which has been deployed on heroku.
All the data from the Raspberry Pi is POSTED to /home of the server. The image when posted makes the flag there go high, which says that some data has been received. To enable the server to use all these images to be posted, we have used Multipart posts which can be found in the documentation of requests module of python.
Once the images are posted to the server, the server decides what to do with the images. In this case, the server stores the image in the a folder called images. 
The GET function comes in to picture when someone is trying to retrieve information from the server. This is called GET requests, which is handled by the same path as above.
There is a function written on the server that measures the changes in the image folder, the moment there is a change there, the server emits the image to the client , i.e, the phone app where the image can now be seen. The moment the image is relayed, the flag that was raised high initially is pulled low. Hence, the server can now receive more posts.

The code has been deployed on Heroku, which is a cloud platform sandbox where you can test all your ideas and see them work in real time. The sever is deployed using the versioning tool by github, the entire process can be found on the heroku website, but in a nutshell, a good knowledge of git and node js is required to deploy the app.
